- Pré-processador de css: no fim todo código gerado será transformado para css puro.
- Extensões do cess, trazer novas funcionalidades ao css.
- Scss: semelhante ao CSS(usa chaves e ponto e virgula), qualquer css válido é scss válido.
-Sass: usa recuo como o python e não utiliza chaves, ponto e virgula, o código css não pode ser usado como Sass.
- pode facilmente converter o SCSS para o Sass e vice-versa com a ferramenta sass-convert
-> O Sass aceita sixtaxe de Scss.

-> Variáveis:
  - salvar um valor na memoria do computador
  - utiliza o símbolo $ para declarar um variável
  - normalmente os nomes compostos são separados por hífen($criando-variavel)
  -AS VARIÁVEIS(GLOBAL) DECLARADAS FORA DO BLOCO, PODEM SER ACESSADAS EM QUALQUER BLOCO
  - VARIÁVEIS(LOCAL) DECLARADA DENTRO DE UM BLOCO, SÓ PODERÁ SER UTILIZADA DENTRO DO BLOCO
  - shadowing: permite que duas variáveis tenha o mesmo nome, sendo uma local e outra local -> no bloco em que a variável é declarada prevalece a local

-> Módulo de Variáveis: externalizar as variáveis em um arquivo
  - criar as variáveis em um documento separada e utilizar o @import

-> Interpolação: substituir valores de forma dinâmica, utiliza a sinstaxe #{valor}
  - pode ser utilizado em variáveis

-> Tipos de comentário:
  -> // : Não é incluso no css;(aparece apenas no sass)
  -> /* : Incluso no css
  -> /*! : Incluso no css, até no modo de compressão
  -> Podemos interpolar valores nos comentários. Ex: #{1 + 3} -> vai se impresso no arquivo css 4

-> Minificando Sass(economiza espaço, o arquivo de css fica menor)
  - Gerar css minificado com o interpretador, na saída:
  - De: styles.css   Para: styles.min.css

-> Nesting: aninhamento dos seletores.
  -Sass: não precisa colocar ponto e virgula, não necessita de chaves.

-> Lista ustilizando Nesting:
  - Separado por virgula, o sass vai entender que queremos separar mais de um elemento seguindo o padrão de aninhmaento.

-> Combinators com Nesting:
  -(+, >, ~)
  - > : descendência, todos os elementos descendentes dos pai vão ter aquele estilo

-> Parent Selector: serve para se referir ao elemento pai/ referenciar(pai) o nome de uma classe/id
  - utiliza o &

-> Seletor de Placeholder(herança): estender alguma outra classe(atribuindo um extend, ou seja, estamos transferindo os estilos para este elemento). Cria um estilo padrão que será herdado por outros elementos.
  - utilza o %
  - sintaxe:
    %nome
      regras
  - importaçao: @extend nome

-> Partials: criar um arquivo e invocar o mesmo em um outro arquivo( igual os componentes do react)
  - os nomes dos arquivos começam com underline(_buttos.sass)
  - a importação é realizada pelo @import (na importação pode desconsiderar o underline do nome do arquivo)

-> Mixins: são como funções, podemos definir um codigo que poderá ser reutilizado ao longo do projeto.
  - sintaxe: 
    @mixin nome
      regras
  - podemos criar um arquivo com mixins, e importar ele no projeto principal
  - Os mixins podem receber argumentos...
    @mixin nome($variavel1, $variavel2, ...)
      regras
  - Os mixins aceita um parametro pré-definido(default), esses argumentos DEVEM FICAR DEPOIS DOS PARÂMETROS OBRIGATÓRIOS. Caso os parâmetros default receberem algum valor ao chamar a função, é atribuido esse valor na função. O parâmetro default somente vai ser utilizado quando ao chamar a função não passar o valor do parâmetro, correspondente aquela variável.

-> Pode ser realizado operações matemáticas no Sass, e o resultado será transferido para o css.
  - Exemplo: width: (300px / 10px) + 5%
  - Pode ser utilizado variaveis para efetuar o calculo:
    - width: (300px / 10px) + $variavel

-> Funções: parecem com os mixins, porém elas tem o papel de realizar operações.(exemplo: cálculos)
  - definida pela sintaxe: @function nome(argumentos)
  - possibilidade retornar valores com @return
  - as funções aceita um parametro pré-definido(default), esses argumentos DEVEM FICAR DEPOIS DOS PARÂMETROS OBRIGATÓRIOS. Caso os parâmetros default receberem algum valor ao chamar a função, é atribuido esse valor na função. O parâmetro default somente vai ser utilizado quando ao chamar a função não passar o valor do parâmetro, correspondente aquela variável.

-> É possivel gerar erros no Sass(o processamento é pausado), basta utilizar @error 'mensagem';
-> Gerar aviso, é mostrado apenas no console(o processamento não é pausado), basta utilizar @warn 'aviso';
-> Pode utilizar o @debug para verificar debugar o codigo, verificar algum valor de variavel, a mensagem sera impressa no console, basta utilizar @debug "O valor é de: #{$variavel}"

->Condicionais:
  - @if
  - @else
  - @else if

-> Estruturas de repetição
  - @each :estrutura de repetição em listas
  - sintaxe: -> $sizes é a lista[array], $size corresponde a cada elemento dessa lista
    @each $size in $sizes
      código

-> Estrutura de repetição
  - @for :estrutura de repetição controlada(inicio e fim definidos pelo usuário)
  - sinstaxe:
    @for $i from 1 through 3(repetir de 1 até chegar no 3 incluso)
      código

-> A diretiva @use é semelhante ao @import, porém mais nova e performática. Sempre será a primeira regra do arquivo.
->IMPORTANTE: AO IMPORTAR ARQUIVOS UTILIZAR O @USE

IMPORTANTE : ARQUITETURA
  -> SMACSS é a arquitetura Sass, nesse padrão o css é dividido em partes:
    - base: regras básicas de estilo, elementos gerais
    - layout: elementos que foram a página, exemplo: header
    - module: componentes menores
    -state, theme: regas que sobrepõe outras e cores do tema

  -> O arquivo principal vai apenas fazer as importações: main.sass ou app.sass
  -> Estrutura das pastas:
    0-plugins: Frameworks ou códigos de terceiro
    1-base: Arquivos de estilo base(gerais)
    2-layouts: Arquivos para elementos que formam o layout da página(específicos, classe, id)
    3-modules: Componentes das páginas
  -> Cada pasta, vai ter ser arquivo principal.Exemplo: 0-plugins/plugins.sass. O arquivo principal de cada pastar, vai realizar somente  a importação de arquivos relacionada ao seu modulo.


->Tipos de Dados
  - Números: são compostos duas partes- numero e unidade. Exemplo: 100%     (Exemplo: -100 numero - % unidade)
  - Strings: são inseridas entre aspas e tambem sem aspas, pode interpolar valores em string(#{}), pode concatenar string com +;
  - Listas: são arrays, são valores separados por virgula(Exemplo: $arr: 1, 2, 3).  Utiliza estrutura de repetição para interar na lista(each/for)
  - Maps: são objetos, declarados entre parenteses e cada item precisa de chave e valor. Exemplo: $usuario('nome': 'Vitor', 'idade': 31) -> para resgatar algum valor do map, utiliza o metodo map.get(variavel, chave)
  - Boolean: true e false
  - Igualdade/diferença: == / !=
  - Maior/Menor: < / >
  - Operadores Matematicos: +, -, *, /, %(resto)

-> IMPORTANTE: QUANDO FOR NOMEAR AS CLASSES APROVEITAR O NOME DOS ELEMENTOS SUPERIORES PARA UTILIZAR O PARENT SELECT(&)
  <header class="header">
    <div class="header-top">
      <div class="header-top-container">
       ...
      </div>
    </div>
    <div class="header-bottom">
      ...
    </div>
  </header>
  .header
  .&-top-container
  .&-bottom